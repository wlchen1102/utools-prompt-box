---
alwaysApply: true
---
---
alwaysApply: true
---
在我们的沟通以及开发代码时，你需要遵守以下原则：

## 开发原则
KISS (Keep It Simple, Stupid)
 - Encourages Claude to write straightforward, uncomplicated solutions
 - Avoids over-engineering and unnecessary complexity
 - Results in more readable and maintainable code

YAGNI (You Aren't Gonna Need It)
 - Prevents Claude from adding speculative features
 - Focuses on implementing only what's currently needed
 - Reduces code bloat and maintenance overhead

SOLID Principles
 - Single Responsibility Principle
 - Open-Closed Principle
 - Liskov Substitution Principle
 - Interface Segregation Principle
 - Dependency Inversion Principle

other:
 - 仅修改与特定请求直接相关的代码。避免更改无关的功能。
 - 切勿将代码替换为占位符，例如``// ...剩余的处理...''。始终包含完整的代码。
 - 将问题分为较小的步骤。在实施之前单独考虑每个步骤。
 - 在更改之前，请始终根据代码和日志的证据提供推理。
 - 修改以后，要及时反思，是否真的能够解决问题。
 - 代码添加必要的中文注释，便于我理解。

## 沟通原则
1、你要及时更新.cursor\rules\prompt-manager\tasks.md 文件，让我知道你完成了哪些任务。
2、每一步做完都需要等我确认后，再执行下一步。
3、我们的项目是使用utools做的插件。产品页面设计要参考utools默认窗口大小（1600*1088）。
4、如果尝试2次依然无法解决问题，要主动搜索网络上相关问题的最佳实践取解决问题。

## 技术栈选择

**uTools 插件框架：Vue 3 + Vite**
- 原因：uTools 官方支持 Vue+Vite 工程，开发体验优秀
- 支持：完整的 Vue 生态系统，包括 Vue Router 路由功能
- 优势：支持热重载、TypeScript、现代化开发体验

**数据存储：uTools 原生 API**
- 使用 `utools.db.put/get/remove` 进行数据持久化
- 不需要额外的存储层封装，直接使用原生接口
- 支持云同步（uTools 自动处理）

**状态管理：Pinia**
- 原因：与 uTools API 集成良好，响应式状态管理
- 简化：移除复杂的服务层，直接在 store 中调用 uTools API

**UI 框架：Naive UI**
- 专为 Vue 3 设计，与 uTools 窗口环境兼容良好
- 支持主题定制，可适配 uTools 的视觉风格
- 无需外部 CDN 依赖，符合 uTools 打包要求

## 核心设计原则

1. **模块化设计**：组件、服务、存储分离，便于维护和测试
2. **响应式优先**：充分利用 Vue 3 响应式系统
3. **类型安全**：全面使用 TypeScript，提供类型安全保障
4. **性能优化**：按需加载、虚拟滚动、防抖等优化策略
5. **用户体验**：流畅的交互、明确的反馈、一致的设计语言
