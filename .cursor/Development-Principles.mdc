---
alwaysApply: true
---
---
alwaysApply: true
---
在我们的沟通以及开发代码时，你需要遵守以下原则：

## 开发原则
KISS (Keep It Simple, Stupid)
 - Encourages Claude to write straightforward, uncomplicated solutions
 - Avoids over-engineering and unnecessary complexity
 - Results in more readable and maintainable code

YAGNI (You Aren't Gonna Need It)
 - Prevents Claude from adding speculative features
 - Focuses on implementing only what's currently needed
 - Reduces code bloat and maintenance overhead

SOLID Principles
 - Single Responsibility Principle
 - Open-Closed Principle
 - Liskov Substitution Principle
 - Interface Segregation Principle
 - Dependency Inversion Principle

other:
 - 仅修改与特定请求直接相关的代码。避免更改无关的功能。
 - 切勿将代码替换为占位符，例如``// ...剩余的处理...''。始终包含完整的代码。
 - 将问题分为较小的步骤。在实施之前单独考虑每个步骤。
 - 在更改之前，请始终根据代码和日志的证据提供推理。
 - 修改以后，要及时反思，是否真的能够解决问题。
 - 代码添加必要的中文注释，便于我理解。

## 沟通原则
1、你要及时更新.cursor\rules\prompt-manager\tasks.md 文件，让我知道你完成了哪些任务。
2、每一步做完都需要等我确认后，再执行下一步。
3、我们的项目是使用utools做的插件。产品页面设计要参考utools默认窗口大小（1600*1088）。
4、如果尝试2次依然无法解决问题，要主动搜索网络上相关问题的最佳实践取解决问题。

## 技术栈选择

**uTools 插件框架：Vue 3 + Vite**
- 原因：uTools 官方支持 Vue+Vite 工程，开发体验优秀
- 支持：完整的 Vue 生态系统，包括 Vue Router 路由功能
- 优势：支持热重载、TypeScript、现代化开发体验

**数据存储：uTools 原生 API**
- 使用 `utools.db.put/get/remove` 进行数据持久化
- 不需要额外的存储层封装，直接使用原生接口
- 支持云同步（uTools 自动处理）

**状态管理：Pinia**
- 原因：与 uTools API 集成良好，响应式状态管理
- 简化：移除复杂的服务层，直接在 store 中调用 uTools API

**UI 框架：Naive UI**
- 专为 Vue 3 设计，与 uTools 窗口环境兼容良好
- 支持主题定制，可适配 uTools 的视觉风格
- 无需外部 CDN 依赖，符合 uTools 打包要求

## 核心设计原则

1. **模块化设计**：组件、服务、存储分离，便于维护和测试
2. **响应式优先**：充分利用 Vue 3 响应式系统
3. **类型安全**：全面使用 TypeScript，提供类型安全保障
4. **性能优化**：按需加载、虚拟滚动、防抖等优化策略
5. **用户体验**：流畅的交互、明确的反馈、一致的设计语言

# MCP使用说明：

## MCP Context7
当你在代码中涉及第三方库或框架的使用时，如果需要提供代码示例、API用法或最佳实践，请主动调用MCP Context7来获取该库的最新文档信息。

具体使用场景包括：
- 当需要提供某个库的API调用示例时
- 当推荐某个功能的具体实现方式时
- 当解释库的使用方法和参数配置时
- 当提供最佳实践建议时
- 当检查某个API是否仍然有效时

请确保：
1. 优先使用通过MCP Context7获取的最新文档信息
2. 避免提供可能已过时或不存在的API示例
3. 将获取到的最新信息整合到代码建议中
4. 如果获取的信息不完整，请明确告知用户

这样可以确保提供的代码示例和文档始终是最新的，避免因API变更导致的错误。

## Playwright MCP
你是一个智能编程助手，当用户需要网页自动化测试、浏览器交互操作或UI测试时，可以调用Playwright MCP工具来帮助完成任务。

### 何时调用Playwright MCP：

1. **网页自动化测试**：当用户需要自动化测试网页功能、表单提交、按钮点击等操作时
2. **UI测试**：当用户需要验证网页界面元素、布局、样式正确性时
3. **网页截图**：当用户需要截取网页截图、生成页面快照时
4. **网络监控**：当用户需要监控网络请求、响应或进行API测试时
5. **跨浏览器测试**：当用户需要在不同浏览器环境中测试网页兼容性时
6. **表单填写**：当用户需要自动填写表单、上传文件等操作时
7. **页面导航**：当用户需要自动化页面跳转、链接点击等导航操作时

### 使用示例：

- "帮我测试这个登录页面的功能"
- "自动填写并提交这个表单"
- "截取这个网页的截图"
- "监控这个页面的网络请求"
- "测试这个按钮点击后的效果"

### 调用方式：

当检测到上述需求时，使用Playwright MCP的相关工具执行具体的浏览器自动化操作，包括但不限于页面导航、元素交互、截图、网络监控等功能。确保操作完成后向用户提供详细的执行结果和反馈。
